import Head from 'next/head';
import { useState } from 'react';
import axios from 'axios';
import { BsSearch } from 'react-icons/bs';
import { AiOutlineClose } from 'react-icons/ai';
import Weather from '../components/Weather';
import Spinner from '../components/Spinner';
import { WeatherData } from '../types/weatherData';

const Home = () => {
  const [city, setCity] = useState('');
  const [weatherData, setWeather] = useState<WeatherData>({} as WeatherData);
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [cache, setCache] = useState<string[]>([]);
  const [cityTime, setCityTime] = useState({})

  const weatherURL = `https://api.openweathermap.org/data/2.5/weather`;
  const cityTimeURL = `https://timezone.abstractapi.com/v1/current_time`;

  const fetchWeather = async (e: { preventDefault: () => void; }) => {
    e.preventDefault();
    setLoading(true);
    setErrorMessage('');

    if (city) {
      try {
        const weatherResponse = await axios.get(weatherURL, {
          params: {
            q: city,
            units: 'metric',
            appid: process.env.NEXT_PUBLIC_WEATHER_KEY,
          },
        });

        setWeather(weatherResponse.data);
        setCache((prev) => [...prev, city]);
      } catch (error: any) {
        if (error.response && error.response.status === 404) {
          setErrorMessage('Sorry, no records for city.');
        } else {
          console.error(error);
          setErrorMessage('An error occurred while fetching data.');
        }
      }

      try {
        const cityTimeResponse = await axios.get(cityTimeURL, {
          params: {
            api_key: process.env.NEXT_PUBLIC_TIME_KEY,
            location: city,
          },
        });
        setCityTime(cityTimeResponse.data); // Uncomment this if you want to use cityTime data
      } catch (error) {
        console.error(error);
        setCityTime({});
      }
    }
    setLoading(false);
  };

  const getWeatherColor = () => {
    if (weatherData && weatherData.weather) {
      const weather = weatherData.weather[0].main.toLowerCase();
      switch (weather) {
        case "clear":
          return "bg-gradient-to-b from-yellow-200 via-yellow-300 to-yellow-400";
        case "clouds":
          return "bg-gradient-to-b from-gray-200 via-gray-300 to-gray-400";
        case "rain":
          return "bg-gradient-to-b from-blue-200 via-blue-300 to-blue-400";
        case "thunderstorm":
          return "bg-gradient-to-b from-purple-200 via-purple-300 to-purple-400";
        case "snow":
          return "bg-gradient-to-b from-white via-gray-200 to-gray-300";
        default:
          return "bg-gradient-to-b from-blue-400 via-blue-500 to-blue-600";
      }
    }
    return "bg-gradient-to-b from-blue-400 via-blue-500 to-blue-600";
  };

  return (
    <div className={`absolute object-cover bg-black/50 z-[9] p-4 text-center max-[500px]:h-[250%] min-h-full min-w-full ${getWeatherColor()}`}>
      <Head>
        <title>Weather - Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className='relative flex justify-center items-center max-w-[500px] w-full m-auto pt-16 font-bold text-6xl z-10'>Open Weather App</h1>
      <div className='relative flex flex-col justify-between items-center max-w-[500px] w-full m-auto pt-4 mt-8 z-10'>
        <form onSubmit={fetchWeather} className='flex justify-between items-center w-full m-auto p-3 bg-transparent border border-white text-white font-semibold rounded-2xl'>
          <div>
            <input onChange={(e) => setCity(e.target.value)} className={`bg-transparent border-none text-white focus:outline-none text-2xl placeholder:text-white w-[400px] pl-4`} type="text" placeholder='Search city' value={city} />
          </div>
          <button title='button' type='button' className='mr-4' onClick={() => setCity('')}><AiOutlineClose size={25} /></button>
          <button title='button' type='submit' className='mr-4'><BsSearch size={25} /></button>
        </form>
      </div>
      <p className='text-2xl relative flex justify-center max-w-[500px] w-full m-auto pt-4 text-gray-300 z-10'>{errorMessage}</p>
      <div>{loading ? <Spinner /> : weatherData.main ? <Weather data={weatherData} datatime={cityTime} fetchWeather={fetchWeather} temp={cache} setCity={setCity} /> : null}</div>
    </div>
  );
};

export default Home;
